/*
 * ═══════════════════════════════════════════════════════════════
 *                           COMBO KEYS
 * ═══════════════════════════════════════════════════════════════
 */

// ═══════════════════════════════════════════════════════════════
//                        キー位置定義（競合回避）
// ═══════════════════════════════════════════════════════════════

// 上段（Row 0）
#define POS_Q 0
#define POS_W 1
#define POS_E 2
#define POS_R 3
#define POS_T 4
#define POS_Y 5
#define POS_U 6
#define POS_I 7
#define POS_O 8
#define POS_P 9

// ホーム行（Row 1）
#define POS_A 10
#define POS_S 11
#define POS_D 12
#define POS_F 13
#define POS_G 14
#define POS_H 15
#define POS_J 16
#define POS_K 17
#define POS_L 18
#define POS_MIN 19  // MINUS

// 下段（Row 2）
#define POS_Z 20
#define POS_X 21
#define POS_C 22
#define POS_V 23
#define POS_B 24
#define POS_N 25
#define POS_M 26
#define POS_LCK 27  // LCLK
#define POS_RCK 28  // RCLK
#define POS_BSP 29  // BACKSPACE

// 親指行（Row 3）
#define POS_LSH 31   // LSHIFT
#define POS_SPC 32   // SPACE
#define POS_MO1 33   // mo 1
#define POS_LCT 34   // LCTRL
#define POS_DOT 35   // PERIOD
#define POS_MO2 36   // mo 2
#define POS_COM 37   // COMMA
#define POS_ENT 38   // ENTER

// ──────────────────────────────────────────────────────────
// マクロ定義（combos.dtsi内に直接記述）
// ──────────────────────────────────────────────────────────
    
    behaviors {
        shift_mclk: shift_middle_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHIFT>     // 1. シフトを押す
                , <&macro_press &mkp MCLK>      // 2. 中央クリックを押す
                , <&macro_pause_for_release>    // 3. ユーザーがリリースまで待機
                , <&macro_release &mkp MCLK>    // 4. 中央クリックを離す
                , <&macro_release &kp LSHIFT>   // 5. シフトを離す
                ;
        };
    };

// ═══════════════════════════════════════════════════════════════
//                        マクロ関数（タイムアウト50固定）
// ═══════════════════════════════════════════════════════════════

// 基本Combo定義マクロ（全レイヤー有効）
#define CMB(name, pos1, pos2, binding) \
    combo_##name { \
        timeout-ms = <50>; \
        key-positions = <pos1 pos2>; \
        bindings = <binding>; \
    };

// レイヤー限定Combo定義マクロ
#define CMBL(name, pos1, pos2, binding, layer) \
    combo_##name { \
        timeout-ms = <50>; \
        key-positions = <pos1 pos2>; \
        bindings = <binding>; \
        layers = <layer>; \
    };

// 3キーCombo定義マクロ
#define CMB3(name, pos1, pos2, pos3, binding) \
    combo_##name { \
        timeout-ms = <50>; \
        key-positions = <pos1 pos2 pos3>; \
        bindings = <binding>; \
    };

/ {
    combos {
        compatible = "zmk,combos";
        
        //右１
        CMB(ime, POS_O, POS_P, &kp LA(GRAVE))   // O + P → 半角全角切り替え
        CMB(del, POS_L, POS_MIN, &kp DELETE)    // L + ハイフン → DELETE
        CMB(smk, POS_RCK, POS_BSP, &shift_mclk)  // 右クリック + BS → SHIFT+中央クリック

        //左１
        CMB(esc, POS_Q, POS_W, &kp ESC)         // Q + W → ESC
        CMB(tab, POS_A, POS_S, &kp TAB)         // A + S → TAB
        CMB(win, POS_Z, POS_X, &kp LWIN)        // Z + X → WIN

        //右親指
        CMB(uar, POS_COM, POS_DOT, &kp UP)      // カンマ + ピリオド → 上矢印
        CMB(dar, POS_MO2, POS_ENT, &kp DOWN)    // MO2 + エンター → 下矢印
        CMB(rar, POS_DOT, POS_ENT, &kp RIGHT)   // ピリオド + エンター → 右矢印
        CMB(lar, POS_COM, POS_MO2, &kp LEFT)    // カンマ + MO2 → 左矢印

        //左親指
        CMB(ccr, POS_LSH, POS_SPC, &kp LC(C))   // SHIFT + SPACE → ctrl(C)
        CMB(vcr, POS_LCT, POS_MO1, &kp LC(V))   // CTRL + MO1 → ctrl(V)
        CMB(zcr, POS_SPC, POS_MO1, &kp LC(Z))   // SPACE + MO1 → ctrl(Z)
                                                // ctrl + A → SHIFT + CTRLは既存ショートなので使用せず
    };
};
